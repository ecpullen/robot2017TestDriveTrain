package org.usfirst.frc2648.robot2017.commands;

import org.usfirst.frc2648.robot2017.Robot;

import edu.wpi.first.wpilibj.command.Command;

public class EncDriveRev extends Command {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private double m_distance;
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private double l_init,r_init,l_dis,r_dis;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public EncDriveRev(double distance) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        m_distance = -distance;

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	Robot.driveTrain.resetEnc();
    	l_init = Robot.driveTrain.getlEnc().getDistance();//initial positions based on encoders
    	r_init = Robot.driveTrain.getrEnc().getDistance();
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	l_dis = Robot.driveTrain.getlEnc().getDistance()-l_init; // displacement from begining of command
    	r_dis = Robot.driveTrain.getrEnc().getDistance()-r_init;
    	Robot.driveTrain.arcadeDrive(-.5*(1.625-l_dis/m_distance),-(l_dis-r_dis)/20);// proportion for distance from setpoint to position
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
    	//System.out.println(l_dis-m_distance + ' '  + (r_dis-m_distance));
        return Math.abs(l_dis-m_distance) < .4 && Math.abs(r_dis-m_distance) < .4;// if both are within 1 ft of setpoint command finishes
    }

    // Called once after isFinished returns true
    protected void end() {
    	//Robot.driveTrain.drive(-1,-1);
    	Robot.driveTrain.drive(0, 0);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	end();
    }
}

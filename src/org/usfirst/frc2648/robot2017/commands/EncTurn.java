// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2648.robot2017.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc2648.robot2017.Robot;

/**
 *
 */
public class EncTurn extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private double m_rotations;
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private double l_init,r_init,l_dis,r_dis,m_distance;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public EncTurn(double rotations) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        m_rotations = rotations;

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	l_init = -Robot.driveTrain.getlEnc().getDistance();//initial positions based on encoders
    	r_init = -Robot.driveTrain.getrEnc().getDistance();
    	m_distance = -m_rotations*7;//*17;
    	Robot.driveTrain.resetEnc();
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	l_dis = Robot.driveTrain.getlEnc().getDistance()+l_init; // displacement from begining of command
    	r_dis = Robot.driveTrain.getrEnc().getDistance()+r_init;
    	Robot.driveTrain.arcadeDrive(/*-(.5-.5*l_dis/m_distance)*/ 0,-.5*( 1.25-r_dis/m_distance));// proportion for distance from setpoint to position
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
    	return Math.abs(l_dis-m_distance) < .2 || Math.abs(r_dis+m_distance) < .2;
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.driveTrain.drive(0, 0);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
